public class Pet {
    private String name;
    private int age;
    private PetType type;
    private HealthStatus healthStatus;

    public Pet(String name, int age, PetType type, HealthStatus healthStatus) {
        this.name = name;
        this.age = age;
        this.type = type;
        this.healthStatus = healthStatus;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public PetType getType() {
        return type;
    }

    public HealthStatus getHealthStatus() {
        return healthStatus;
    }

    public void displayInfo() {
        System.out.println("Имя: " + name + ", Возраст: " + age + ", Тип: " + type + ", Состояние: " + healthStatus);
    }
}

public enum PetType {
    DOG, 
    CAT  
}

public enum HealthStatus {
    HEALTHY, 
    SICK     
}

public class Dog extends Pet {
    private String breed;

    public Dog(String name, int age, String breed, HealthStatus healthStatus) {
        super(name, age, PetType.DOG, healthStatus);
        this.breed = breed;
    }

    public String getBreed() {
        return breed;
    }

    public void displayInfo() {
        super.displayInfo();
        System.out.println("Порода: " + breed);
    }
}

public class Cat extends Pet {
    private String color;

    public Cat(String name, int age, String color, HealthStatus healthStatus) {
        super(name, age, PetType.CAT, healthStatus);
        this.color = color;
    }

    public String getColor() {
        return color;
    }

    public void displayInfo() {
        super.displayInfo();
        System.out.println("Цвет: " + color);
    }
}

import java.util.ArrayList;
import java.util.List;

public class PetClinic {
    private List<Pet> pets;

    public PetClinic() {
        this.pets = new ArrayList<>();
    }

    public void addPet(Pet pet) throws Exception {
        for (Pet existingPet : pets) {
            if (existingPet.getName().equalsIgnoreCase(pet.getName())) {
                throw new Exception("Питомец с таким именем уже есть в клинике!");
            }
        }
        pets.add(pet);
    }

    public void displayPets() {
        for (Pet pet : pets) {
            pet.displayInfo();
            System.out.println(); 
        }
    }
}

public class Main {
    public static void main(String[] args) {
        PetClinic clinic = new PetClinic();

        try {
            Dog dog1 = new Dog("Бобик", 3, "Шершавая", HealthStatus.HEALTHY);
            Cat cat1 = new Cat("Мурка", 2, "Черный", HealthStatus.SICK);

            clinic.addPet(dog1);
            clinic.addPet(cat1);

            // Попытка добавить питомца с уже существующим именем
            Dog dog2 = new Dog("Бобик", 4, "Лабрадор", HealthStatus.HEALTHY);
            clinic.addPet(dog2); 

            Cat cat2 = new Cat("Гарри", 2, "Рыжий", HealthStatus.HEALTHY);
            clinic.addPet(cat2);

            clinic.displayPets();
        } catch (Exception e) {
            System.out.println("Ошибка: " + e.getMessage());
        }
    }
}
